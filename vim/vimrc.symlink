if filereadable('./Session.vim')
  execute Session.vim"
endif

set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

syntax enable
set laststatus=2 " Always show the statusline

source ~/.dot/vim/bundles.vim

filetype plugin indent on     " required!

let mapleader = ","

syntax enable

filetype on
set t_Co=256          "set 256 terminal colors

if &term =~ '256color'
  " Disable Background Color Erase (BCE) so that color schemes
  " work properly when Vim is used inside tmux and GNU screen.
  " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

set background=dark
colorscheme solarized


let $JS_CMD='node'

" settings

set mouse=nicrh                                                       "enable mouse support in all modes
set modeline
set modelines=5
set scrolloff=4
set showmode
set showcmd
set visualbell
set cursorline
"" set cursorcolumn                 " currently disabled due to performance impacts
set ttyfast
set ruler
set laststatus=2
set norelativenumber
set nonumber
set guioptions-=T  "remove toolbar
set showmatch                                                      " Show matching brackets.
set mat=5                                                          " Bracket blinking.
set history=1000                                                  " large history
set undofile
set undolevels=1000                                               " use many undos
set pastetoggle=<F2>                                               " enable/disable autoformatting on right mouse paste
set shiftround
set autoread                                                       " Autoload files that are modified outside vim
augroup checktime
    au!
    if !has("gui_running")
        "silent! necessary otherwise throws errors when using command
        "line window.
        autocmd BufEnter        * silent! checktime
        autocmd CursorHold      * silent! checktime
        autocmd CursorHoldI     * silent! checktime
    endif
augroup END
set autowriteall
set hidden                                                           " allow vim to create hidden buffers
set backspace=indent,eol,start                                       " allow backspacing over everything in insert mode
set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
set autochdir

set suffixesadd=.js,.json,.jade,.coffee

set completeopt=longest,menuone,preview                              " Better Completion

"  set nobackup                                                       " no backup file
"  set noswapfile                                                     " no swap file

set splitbelow splitright                                          " Add new windows towards the right and bottom.

" Indenting *******************************************************************
set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent (local to buffer)

" Searching *******************************************************************
set hlsearch  " highlight search
set incsearch  " Incremental search, search as you type
set ignorecase " Ignore case when searching
set smartcase " Ignore case when searching lowercase
set incsearch
set showmatch

set listchars=tab:>\ ,eol:$,trail:.,nbsp:_

" FONTS **********************"

if has('mac')
  set guifont=Mensch:h10
elseif has("unix")
  set guifont=Mensch\ 8
endif


" SET ENCODING {{{"{{{
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8 nobomb
  setglobal fileencoding=utf-8 nobomb
  set fileencodings=ucs-bom,utf-8,latin1
endif
" }}}"}}}
" STATUSLINE {{{

set statusline=%f
set statusline+=%m
set statusline+=%r
set statusline+=%h
set statusline+=%w

set statusline+=\

set statusline+=[%{&ff}]

set statusline+=\

set statusline+=%y

set statusline+=\

set statusline+=[\%03.3b]

set statusline+=\

set statusline+=%#redbar#                " Highlight the following as a warning.
set statusline+=%{SyntasticStatuslineFlag()} " Syntastic errors.
set statusline+=%*                           " Reset highlighting.

set statusline+=%=

set statusline+=%{fugitive#statusline()}

set statusline+=\

set statusline+=%-14.(%l,%c%V%)

set statusline+=\

set statusline+=%P

set statusline+=\

set statusline+=%L
set statusline+=
set statusline+=
" }}}
" WILDMENU COMPLETION {{{

set wildignore+=*.sass-cache                     " SASS

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=tmp
set wildignore+=*.class                            " Java class files"
set wildignore+=*.jar                            " Java jar files"
set wildignore+=*node_modules                     " Node modules dir


" }}}
" BACKUPS {{{

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups

" JAVASCRIPT {{{

let g:syntax_js=['function', 'return', "proto"]

augroup ft_javascript
  au!
  au FileType javascript setlocal foldmethod=marker
  au FileType javascript setlocal foldmarker={,}
  au FileType javascript setl foldmethod=syntax
  au FileType javascript setl conceallevel=2 concealcursor=nc
augroup END

" }}}
" RUBY {{{

augroup ft_ruby
  au!
  " FOldmethod switched to manual, because of plugin problems (slow response
  " times)
  au Filetype ruby setlocal foldmethod=manual
  let g:rubycomplete_buffer_loading = 1
  let g:rubycomplete_classes_in_global = 1
  let g:rubycomplete_rails = 1
augroup END

" }}}
" VIM {{{

augroup ft_vim
  au!

  au FileType vim setlocal foldmethod=marker
  au FileType help setlocal textwidth=78
  au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}


" TABSTYLE FUNCTIONS {{{
function! Tabstyle_tabs()
  " Using 2 column tabs
  set softtabstop=2
  set shiftwidth=2
  set tabstop=2
  set noexpandtab
  autocmd User Rails set softtabstop=2
  autocmd User Rails set shiftwidth=2
  autocmd User Rails set tabstop=2
  autocmd User Rails set noexpandtab
endfunction

function! Tabstyle_spaces()
  " Use 2 spaces
  set softtabstop=2
  set shiftwidth=2
  set tabstop=2
  set expandtab
endfunction

call Tabstyle_spaces()
"}}}

" CONVENIENCE MAPPINGS ---------------------------------------------------- {{{

" Substitute
nnoremap <leader>s :%s//<left>

" Preview Files
nnoremap <F6> :w<cr>:Hammer<cr>

nnoremap <F4> :TagbarToggle<cr>

" HTML tag closing
inoremap <C-_> <Space><BS><Esc>:call InsertCloseTag()<cr>a

nnoremap <F3> :NERDTreeToggle<cr>

vmap Q gq                                                          " us Q to format current paragraph
nmap Q gqap


"Switch between windows
map <C-H> <C-w>h
map <C-J> <C-w>j
map <C-K> <C-w>k
map <C-L> <C-w>l

nnoremap <leader>1 yypVr=
nnoremap <leader>2 yypVr-
nnoremap <leader>3 yypVr
nnoremap / /\v

vnoremap / /\v
"nmap j gj                                                        " go down instead of jump per line
"nnoremap j gj                                                        " go down instead of jump per line
"nnoremap k gk                                                        " go up
vnoremap <F1> <ESC>:wa<cr>
map <F1> :wa<CR>
imap <F1> <Esc>:wa<CR>

" map show next match (vimgrep)
nmap <leader>n :cn<CR>
nmap ;n :cp<CR>

"opt-cmd-arrows [next & previous open files]
map <D-M-Left> :bp<CR>
map <D-M-Right> :bn<CR>

" if you forgot to open a file with sudo you can write it with w!!
cmap w!! w !sudo tee % >/dev/null

"find merge conflicts
nmap <silent> <leader>cf <ESC>/\v^[<=>]{7}( .*\|$)<CR>

"insert current date
nmap <leader>df a<C-R>=strftime("%Y-%m-%d %I:%M")<CR><Esc>
nmap <leader>dd a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
nmap <leader>dt a<C-R>=strftime("%I:%M")<CR><Esc>

" FUGITIVE {{{

nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>

augroup ft_fugitive
  au!

  au BufNewFile,BufRead .git/index setlocal nolist
augroup END

" }}}

" POWERLINE {{{
let g:Powerline_symbols = 'fancy'
" }}}

" CTRLP {{{
let g:ctrlp_map = '<C-G>'
map <leader>rr :ClearCtrlPCache<CR>
map <C-d> :CtrlPBuffer<CR>
map <C-รถ> :CtrlPMRU<CR>
map <C-A-g> :CtrlPMixed<CR>
map <leader>p :CtrlP<CR>
map <leader>b :CtrlPBuffer<CR>

let g:ctrlp_max_files = 30000
let g:ctrlp_working_path_mode = "ra"
let g:ctrlp_root_markers= ["node_modules", ".git", ".hg", ".svn", ".bzr", "_darcs"]
" }}}


source ~/.vim/vimrc_local

if filereadable('./.vimrc.project')                                     "load session if existent
  execute "source ./.vimrc.project"
endif
